/**
 * Google Gemini embedding provider implementation
 */
import { EmbeddingProvider } from "../../types/memory.js";
import { EmbeddingError } from "../../utils/errors.js";

/**
 * Dimensions of the embeddings generated by the Gemini text-embedding model
 */
const GEMINI_EMBEDDING_DIMENSIONS = 768;

/**
 * Base URL for the Gemini API
 */
const GEMINI_API_URL = "https://generativelanguage.googleapis.com/v1";

/**
 * The Gemini model to use for text embedding
 */
const GEMINI_EMBEDDING_MODEL = "embedding-001";

/**
 * Implementation of the EmbeddingProvider interface for Google Gemini API
 */
export class GeminiEmbeddingProvider implements EmbeddingProvider {
  /**
   * Provider name
   */
  public readonly name = "gemini";
  
  /**
   * API key for Google Gemini
   */
  private readonly apiKey: string;
  
  /**
   * Create a new Gemini embedding provider
   * 
   * @param apiKey - The Google Gemini API key
   */
  constructor(apiKey: string) {
    this.apiKey = apiKey;
  }
  
  /**
   * Get the dimensions of the embeddings produced by this provider
   */
  getDimensions(): number {
    return GEMINI_EMBEDDING_DIMENSIONS;
  }
  
  /**
   * Get the embedding for the given text
   * 
   * @param text - The text to embed
   * @returns A vector representation of the text
   * @throws EmbeddingError if the embedding fails
   */
  async getEmbedding(text: string): Promise<number[]> {
    try {
      const url = `${GEMINI_API_URL}/models/${GEMINI_EMBEDDING_MODEL}:embedText?key=${this.apiKey}`;
      
      const response = await fetch(url, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          text,
        }),
      });
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(
          `Gemini API responded with status ${response.status}: ${JSON.stringify(errorData)}`
        );
      }
      
      const data = await response.json();
      
      // Extract the embedding from the response
      if (!data.embedding || !data.embedding.values || !Array.isArray(data.embedding.values)) {
        throw new Error(`Unexpected response format from Gemini API: ${JSON.stringify(data)}`);
      }
      
      return data.embedding.values;
    } catch (error) {
      if (error instanceof Error) {
        throw new EmbeddingError(`Failed to get embedding from Gemini: ${error.message}`);
      }
      throw new EmbeddingError(`Failed to get embedding from Gemini: ${String(error)}`);
    }
  }
}
